/////////////////////////////////////////////////////////////////////
// How to use the COM object.
/////////////////////////////////////////////////////////////////////

1) The client should call the following to initialize the COM DLL from
   the main process _and_ from any thread that will be using COM:

	::CoInitializeEx(
		NULL,				//always NULL
		COINIT_APARTMENTTHREADED	//see book about threading models
		);

	NOTE: You also need to add _WIN32_DCOM to your project settings under 
	"Preprocessor definitions" in order to get the prototype definition for
	::CoInitializeEx() included in your compile.

2) Import the type library of the server using one of several formats:

#import "server\server.tlb"              // must specify SERVERLib:: namespace scope in
										// front of every IWzdPtr, etc.

-OR-

#import "server\debug\server.tlb" no_namespace // don't need to use a SERVERLib:: scope in
										// front of every IWzdPtr, etc.

-OR-
#import "server\server.tlb" raw_interfaces_only // doesn't create wrappers around each method


3) Create the COM object using the smart pointer:

		IWzdPtr wzd(
				__uuidof(Wzd)		//guid of DLL or EXE that contains class
				);


4) Call the methods of the COM object:

		wzd->Method1(1234);
		wzd->PutProperty1(4321);
		long lVal=wzd->GetProperty1();

(The smart pointer takes care of converting your mthod calls into Invoke()'s.)

5) Catch any COM errors with:

	try
	{
	}
	catch (_com_error &err)
	{
		AfxMessageBox(err.ErrorMessage());
		return;
	}



/////////////////////////////////////////////////////////////////////
// From: COM Programming by Example by John E. Swanke
// Copyright (C) 2000 jeswanke. All rights reserved.
/////////////////////////////////////////////////////////////////////

