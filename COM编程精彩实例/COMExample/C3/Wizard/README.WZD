/////////////////////////////////////////////////////////////////////
// How to use the COM object.
/////////////////////////////////////////////////////////////////////

1) The client should call the following to initialize the COM DLL from
   the main process _and_ from any thread that will be using COM:

	::CoInitializeEx(
		NULL,				//always NULL
		COINIT_APARTMENTTHREADED	//see book about threading models
		);

	NOTE: You also need to add _WIN32_DCOM to your project settings under 
	"Preprocessor definitions" in order to get the prototype definition for
	::CoInitializeEx() included in your compile.

2) Create a guids.h file containing the class ID of COM object, unless you
   plan to use a ProgID to create the object.

#if !defined guids_h
#define guids_h

const CLSID CLSID_IWzdSrv = { 0x351495d1, 0xaa6d, 0x11d3, 0x80, 0x7e, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0 };

#endif 

3) Create a helper class that will wrap this COM object by first opening
   the ClassWizard and clicking on the Member Variables page. Then click 
   on the "Add Class..." button and select the "From a type library" menu 
   item. Then find and select your server's .tlb file.

4) To create this class in your client use:

	IWzd wzd;
	if (!wzd.CreateDispatch(
			CLSID_IWzdSrv,	// or Program ID (ex:"Server.Wzd.6")
			e))
		throw e;

5) Access it's methods and properties as usual:

		wzd.Method1(1234);
		wzd.SetProperty1(4321);
		long lVal=wzd.GetProperty1();

6) Catch any errors with:


	COleException *e=new COleException;
	try
	{
	}
	catch (COleException *e)
	{
		_com_error err(e->m_sc);
		AfxMessageBox(err.ErrorMessage());
		e->Delete();
   	}



/////////////////////////////////////////////////////////////////////
// From: COM Programming by Example by John E. Swanke
// Copyright (C) 2000 jeswanke. All rights reserved.
/////////////////////////////////////////////////////////////////////

